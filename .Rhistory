# Chunk 3: Read in the data
## Import the SSRT results output from the extractAllSSTResults.m script
SSRTdata <- read.table(
"~/Desktop/REV/REV_SST/compiledResults/upToREV144/singleVarTxts/REV_SSRTint16.txt",
sep="\t", header=FALSE)
## No Response Counts
noResponseCount <- read.table(
"~/Desktop/REV/REV_SST/compiledResults/upToREV144/initialCheck/NRCount.txt",
sep="\t", header=FALSE)
## Wrong Go Counts
wrongGoCount <- read.table(
"~/Desktop/REV/REV_SST/compiledResults/upToREV144/initialCheck/wrongGoCount.txt",
sep="\t", header=FALSE)
## Percent inhibition
pctInhibition <- read.table(
"~/Desktop/REV/REV_SST/compiledResults/upToREV144/singleVarTxts/REV_PctInhib16.txt",
sep="\t", header=FALSE)
categories <- as.data.frame(read.table("~/Desktop/REV/REV_SST/info/participantCategories.txt"))
colnames(categories) <- c("ID", "completed.study", "num.categories", "food", "alcohol", "tobacco", "drugs")
categories <- categories[2:145, ]
dfs <- c("noResponseCount", "wrongGoCount", "pctInhibition", "SSRTdata")
for(df in dfs) {
df.tmp <- get(df)
names(df.tmp) <- c("run1", "run2","run3", "run4", "run5", "run6", "run7", "run8", "run9", "run10", "run11", "run12", "run13", "run14")
assign(df, df.tmp)
}
head(noResponseCount)
head(SSRTdata)
for(df in dfs) {
df.tmp <- get(df)
df.tmp <- cbind(ID, condition, df.tmp)
assign(paste(df, "_long", sep=""), df.tmp)
}
head(SSRTdata)
for(df in dfs) {
df.tmp <- get(df)
df.tmp <- cbind(ID, condition, df.tmp)
assign(df, df.tmp)
}
head(SSRTdata)
for(df in dfs) {
df.tmp <- get(df)
df.tmp <- melt(data=df.tmp, idvars=ID, measure.vars=c("run1", "run2","run3", "run4", "run5", "run6", "run7", "run8", "run9", "run10", "run11", "run12", "run13", "run14"), variable.name = "time", value.name=df)
assign(paste(df, "_long", sep=""),df.tmp)
}
head(SSRTdata_long)
SSRT.df.raw <- cbind(SSRTdata_long, noResponseCount_long[,4], wrongGoCount_long[,4], pctInhibition_long[,4])
colnames(SSRT.df.raw) <- c("ID", "condition", "time", "SSRT", "numNoResponse", "numWrongGo", "pctInhibition")
SSRT.df.raw[ is.na(SSRT.df.raw) ] <- NA
head(SSRTdata_long)
SSRT.df.clean <- SSRT.df.raw
SSRT.df.clean <- SSRT.df.clean %>% mutate(numNoResponse= replace(numNoResponse, which(numNoResponse>25 & time != "run1" & time != "run2" & time != "run13" & time != "run14" ), NA)) # Training
SSRT.df.clean <- SSRT.df.clean %>% mutate(numNoResponse= replace(numNoResponse, which(numNoResponse>50), NA)) # Scans
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(is.na(numNoResponse) & time != "run1" & time != "run2" & time != "run13" & time != "run14"), NA)) # Training
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(is.na(numNoResponse)), NA)) # Scans
SSRT.df.clean <- SSRT.df.clean %>% mutate(numWrongGo= replace(numWrongGo, which(condition == "train" & numWrongGo>25 & time != "run1" & time != "run2" & time != "run13" & time != "run14"), NA)) # Training
SSRT.df.clean <- SSRT.df.clean %>% mutate(numWrongGo= replace(numWrongGo, which(numWrongGo>25 & time != "run3" & time != "run4" & time != "run5" & time != "run6" & time != "run7" & time != "run8" & time != "run9" & time != "run10" & time != "run11" & time != "run12"), NA)) # Scans
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(condition == "train" & is.na(numWrongGo) & time != "run1" & time != "run2" & time != "run13" & time != "run14" ), NA)) # Training
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(is.na(numWrongGo) & time != "run3" & time != "run4" & time != "run5" & time != "run6" & time != "run7" & time != "run8" & time != "run9" & time != "run10" & time != "run11" & time != "run12"), NA)) # Scans
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(condition=="train" & SSRT>500 & time != "run1" & time != "run2" & time != "run13" & time != "run14"), NA)) # Training
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(SSRT>850 | SSRT <100 & time != "run3" & time != "run4" & time != "run5" & time != "run6" & time != "run7" & time != "run8" & time != "run9" & time != "run10" & time != "run11" & time != "run12"), NA)) # Scans
SSRT.df.clean <- SSRT.df.clean %>% mutate(pctInhibition= replace(pctInhibition, which(pctInhibition<15 | pctInhibition>75 & condition=="train" & time != "run1" & time != "run2" & time != "run13" & time != "run14" ), NA)) # Training
SSRT.df.clean <- SSRT.df.clean %>% mutate(pctInhibition= replace(pctInhibition, which(pctInhibition<20 | pctInhibition>75 & time != "run3" & time != "run4" & time != "run5" & time != "run6" & time != "run7" & time != "run8" & time != "run9" & time != "run10" & time != "run11" & time != "run12"), NA)) # Scans
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(condition=="train" & is.na(pctInhibition) & time != "run1" & time != "run2" & time != "run13" & time != "run14" ), NA)) # Training
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(is.na(pctInhibition) & time != "run3" & time != "run4" & time != "run5" & time != "run6" & time != "run7" & time != "run8" & time != "run9" & time != "run10" & time != "run11" & time != "run12"), NA)) # Scans
noResp_raw <- ggplot(SSRT.df, aes(x= time, y= numNoResponse, label=ID))+
geom_point(na.rm=TRUE) +
geom_text(aes(label=ifelse(numNoResponse>10,as.character(ID),'')),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("Num of Non-Responses Raw Data, \nAll Participants, All Time Points")
wrongGo_rawAll <- ggplot(subset(SSRT.df, time %in% c("run1", "run2", "run13", "run14"))) +
aes(x= time, y= numWrongGo, label=ID) +
geom_point(na.rm=TRUE) +
geom_text(aes(label=as.character(ID)),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("Wrong Go Count During Scans \nRaw Data, All Participants")
noResp_raw <- ggplot(SSRT.df.raw, aes(x= time, y= numNoResponse, label=ID))+
geom_point(na.rm=TRUE) +
geom_text(aes(label=ifelse(numNoResponse>10,as.character(ID),'')),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("Num of Non-Responses Raw Data, \nAll Participants, All Time Points")
wrongGo_rawAll <- ggplot(subset(SSRT.df.raw, time %in% c("run1", "run2", "run13", "run14"))) +
aes(x= time, y= numWrongGo, label=ID) +
geom_point(na.rm=TRUE) +
geom_text(aes(label=as.character(ID)),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("Wrong Go Count During Scans \nRaw Data, All Participants")
wrongGo_rawTrn <- ggplot(subset(SSRT.df.raw,time %in%  c("run3", "run4", "run5", "run6", "run7", "run8", "run9", "run10", "run11", "run12") & condition == "train")) +
aes(x= time, y= numWrongGo, label=ID) +
geom_point(na.rm=TRUE) +
geom_text(aes(label=ifelse(numWrongGo>25,as.character(ID),'')),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("Wrong Go Count During Training \nRaw Data, Training Group Only")
SSRT_rawScan <- ggplot(subset(SSRT.df.raw,time %in% c("run1", "run2", "run13", "run14"))) +
aes(x= time, y= SSRT, label=ID)+
geom_point(na.rm=TRUE) +
geom_text(aes(label=as.character(ID)),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("SSRTs During Scans, \nAll Participants")
SSRT_rawTrn <- ggplot(subset(SSRT.df.raw, time %in%  c("run3", "run4", "run5", "run6", "run7", "run8", "run9", "run10", "run11", "run12") & condition == "train")) +
aes(x= time, y= SSRT, label=ID)+
geom_point(na.rm=TRUE) +
geom_text(aes(label=as.character(ID)),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("SSRTs During Training Raw Data, \nTraining Group Only")
PctInhib_rawScan <- ggplot(subset(SSRT.df.raw,time %in% c("run1", "run2", "run13", "run14"))) +
aes(x= time, y= pctInhibition, label=ID)+
geom_point(na.rm=TRUE) +
geom_text(aes(label=as.character(ID)),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("Percent Inhibition During Scans, \nAll Participants")
pctInhib_rawTrn <- ggplot(subset(SSRT.df.raw, time %in% c("run3", "run4", "run5", "run6", "run7", "run8", "run9", "run10", "run11", "run12") & condition == "train")) +
aes(x= time, y= pctInhibition, label=ID)+
geom_point(na.rm=TRUE) +
geom_jitter(width = 0.25) +
geom_text(aes(label=as.character(ID)),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("Percent Inhibition Raw Data, \nTraining Group During Training")
noResp_clean <- ggplot(SSRT.df.clean, aes(x= time, y= numNoResponse, label=ID))+
geom_point(na.rm=TRUE) +
geom_text(aes(label=ifelse(numNoResponse>10,as.character(ID),'')),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("Non-Responses, All P's, All Times, \nUpper Limits: Training 25, Scans 50")
wrongGo_cleanAll <- ggplot(subset(SSRT.df.clean, time %in% c("run1", "run2", "run13", "run14"))) +
aes(x= time, y= numWrongGo, label=ID) +
geom_point(na.rm=TRUE) +
geom_text(aes(label=as.character(ID)),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("Wrong Gos During Scans, All P's, \nUpper Limit Cut-Off of 25")
wrongGo_cleanTrn <- ggplot(subset(SSRT.df.clean,time %in%  c("run3", "run4", "run5", "run6", "run7", "run8", "run9", "run10", "run11", "run12") & condition == "train")) +
aes(x= time, y= numWrongGo, label=ID) +
geom_point(na.rm=TRUE) +
geom_text(aes(label=ifelse(numWrongGo>25,as.character(ID),'')),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("Wrong Go's During Training, \nTraining Group Only, Upper Limit 25")
PctInhib_cleanTrn <- ggplot(subset(SSRT.df.clean, time %in%  c("run3", "run4", "run5", "run6", "run7", "run8", "run9", "run10", "run11", "run12") & condition == "train")) +
aes(x= time, y= pctInhibition, label=ID)+
geom_point(na.rm=TRUE) +
geom_text(aes(label=as.character(ID)),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("Percent Inhibition During Training, \nTraining Group Only, Lower Limit 15")
PctInhib_cleanScan <- ggplot(subset(SSRT.df.clean,time %in% c("run1", "run2", "run13", "run14"))) +
aes(x= time, y= pctInhibition, label=ID)+
geom_point(na.rm=TRUE) +
geom_text(aes(label=as.character(ID)),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("Pct Inhibition During Scans, All P's, \nUpper Limit 80, Lower Limit 20")
SSRT_cleanScan <- ggplot(subset(SSRT.df.clean,time %in% c("run1", "run2", "run13", "run14"))) +
aes(x= time, y= SSRT, label=ID)+
geom_point(na.rm=TRUE) +
geom_text(aes(label=as.character(ID)),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("SSRTs During Scans, All P's, \nUpper Limit 850 and Lower Limit 50")
SSRT_cleanTrn <- ggplot(subset(SSRT.df.clean, time %in%  c("run3", "run4", "run5", "run6", "run7", "run8", "run9", "run10", "run11", "run12") & condition == "train")) +
aes(x= time, y= SSRT, label=ID)+
geom_point(na.rm=TRUE) +
geom_text(aes(label=as.character(ID)),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("SSRTs During Training, \nTraining Group, Upper Limit 500")
grid.arrange(wrongGo_rawAll, wrongGo_cleanAll, ncol=2)
grid.arrange(wrongGo_rawTrn, wrongGo_cleanTrn, ncol=2)
grid.arrange(noResp_raw, noResp_clean, ncol=2)
grid.arrange(PctInhib_rawScan,PctInhib_cleanScan, ncol=2)
grid.arrange(pctInhib_rawTrn, PctInhib_cleanTrn, ncol=2)
grid.arrange(SSRT_rawScan, SSRT_cleanScan, ncol=2)
grid.arrange(SSRT_rawTrn, SSRT_cleanTrn, ncol=2)
SSRT.df.clean$prePost <- ifelse(SSRT.df.clean$time %in% c("run1", "run2"), "pre", ifelse(SSRT.df.clean$time %in% c("run13", "run14"), "post", NA))
AvgSSRT <- SSRT.df.clean %>% group_by(ID, prePost) %>% summarise(mean(SSRT, na.rm=TRUE))
AvgSSRT <- AvgSSRT[ which(AvgSSRT$prePost=="pre" | AvgSSRT$prePost=="post"), ]
AvgSSRT$prePost <- as.factor(AvgSSRT$prePost)
AvgSSRT <- AvgSSRT[order(AvgSSRT$prePost),]
condition_twice <- rep(condition, 2)
condition <- cbind(condition_twice)
condition <- factor(condition, labels = c("control", "train"))
SSRT.df.analysis <- merge(condition, AvgSSRT, by=0)
SSRT.df.analysis <- cbind(SSRT.df.analysis, condition)
SSRT.df.analysis <- SSRT.df.analysis[order(SSRT.df.analysis$ID),]
SSRT.df.analysis <- SSRT.df.analysis[,2:5]
colnames(SSRT.df.analysis) <- c("condition", "ID", "time", "avgd_SSRT")
dat_hist_trn <- subset(SSRT.df.clean, condition == "train")
dat_hist_trn <- dat_hist_trn[ which(dat_hist_trn$time!="run1" & dat_hist_trn$time!="run2" & dat_hist_trn$time!="run13"  & dat_hist_trn$time!="run14"), ]
dat_hist_trn <- dat_hist_trn %>% group_by(ID) %>% summarize(ViableN=sum(!is.na(SSRT)))
viable_trn <- qplot(dat_hist_trn$ViableN, geom="histogram", xlab = "Viable SST Runs", ylab = "Count", main = "Viable Training Sessions, \nTraining Group", binwidth=.5)
dat_hist_cont <- subset(cleaned_SSRT, condition == "control")
dat_hist_cont <- subset(SSRT.df.clean, condition == "control")
dat_hist_cont <- dat_hist_cont[ which(dat_hist_cont$time!="run1" & dat_hist_cont$time!="run2" & dat_hist_cont$time!="run13"  & dat_hist_cont$time!="run14"), ]
dat_hist_cont <- dat_hist_cont %>% group_by(ID) %>% summarize(ViableN=sum(!is.na(SSRT)))
viable_contr <- qplot(dat_hist_cont$ViableN, geom="histogram", xlab = "Viable SST Runs", ylab = "Count", main = "Viable Training Sessions, \nControl Group", binwidth=.5)
grid.arrange(viable_trn, viable_contr, ncol=2)
table(dat_hist_trn$ViableN)
table(dat_hist_cont$ViableN)
exclude <- as.numeric(dat_hist_trn$ID[(dat_hist_trn$ViableN<6)])
SSRTdata_prepost <- SSRTdata %>% mutate(avgd_SSRT= replace(avgd_SSRT, which(ID %in% exclude), NA))
SSRTdata_prepost[ is.na(SSRTdata_prepost) ] <- NA
SSRT.df.prepost <- SSRT.df.analysis %>% mutate(avgd_SSRT= replace(avgd_SSRT, which(ID %in% exclude), NA))
SSRT.df.prepost[ is.na(SSRT.df.prepost) ] <- NA
SSRT.df.full <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(ID %in% exclude), NA))
SSRT.df.train <- subset(SSRT.df.full, condition == "train" & time != "run1" & time != "run2" & time != "run13" & time != "run14")
SSRT.df.10ses <- subset(SSRT.df.full, time != "run1" & time != "run2" & time != "run13" & time != "run14")
SSRT.df.analysis
ggplot(SSRT.df.prepost, aes(x= time, y= avgd_SSRT, fill=condition)) +
geom_boxplot(na.rm=TRUE) +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("Pre and Post Stop Signal \nResponse Time (SSRT) by Group") +
labs(x= "Time Point", y= "Stop Signal Response Time")+
scale_fill_discrete(name="Condition",
breaks=c("control", "train"),
labels=c("Control", "Training"))
SSRT.df.train$time <- as.numeric(SSRT.df.train$time)
mlmodel <- lmer( SSRT ~ time + (1 + time|ID), data = SSRT.df.train )
summary(mlmodel)
SSRT.df.10ses$time <- as.numeric(SSRT.df.10ses$time)
full.mlModel<- lmer( SSRT ~ condition*time + (1 + time | ID), data = SSRT.df.10ses)
summary(full.mlModel)
anova(full.mlModel)
# Chunk 1: setup
rm(list=ls())
## Install and load required packages
list.of.packages <- c("dplyr", "reshape2", "ggplot2", "psych", "gridExtra", "knitr", "lme4")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(dplyr)
library(reshape2)
library(ggplot2)
library(psych)
library(gridExtra)
library(knitr)
library(lme4)
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/', echo=FALSE, warning=FALSE, message=FALSE)
# Chunk 2: Create the participant ID and condition variables
ID <- as.factor(c(1:144)) # Create the subject ID column
cond <- c(0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0) # Match the participant to their condition
condition <- factor(cond, labels=c("control", "train"))
# Chunk 3: Read in the data
## Import the SSRT results output from the extractAllSSTResults.m script
SSRTdata <- read.table(
"~/Desktop/REV/REV_SST/compiledResults/upToREV144/singleVarTxts/REV_SSRTint16.txt",
sep="\t", header=FALSE)
## No Response Counts
noResponseCount <- read.table(
"~/Desktop/REV/REV_SST/compiledResults/upToREV144/initialCheck/NRCount.txt",
sep="\t", header=FALSE)
## Wrong Go Counts
wrongGoCount <- read.table(
"~/Desktop/REV/REV_SST/compiledResults/upToREV144/initialCheck/wrongGoCount.txt",
sep="\t", header=FALSE)
## Percent inhibition
pctInhibition <- read.table(
"~/Desktop/REV/REV_SST/compiledResults/upToREV144/singleVarTxts/REV_PctInhib16.txt",
sep="\t", header=FALSE)
categories <- as.data.frame(read.table("~/Desktop/REV/REV_SST/info/participantCategories.txt"))
colnames(categories) <- c("ID", "completed.study", "num.categories", "food", "alcohol", "tobacco", "drugs")
categories <- categories[2:145, ]
# Chunk 4: Put all data frames in long form
# Make a vector containing all the dataframes
dfs <- c("noResponseCount", "wrongGoCount", "pctInhibition", "SSRTdata")
# Name the columns for each data frame by the run number
for(df in dfs) {
df.tmp <- get(df)
names(df.tmp) <- c("run1", "run2","run3", "run4", "run5", "run6", "run7", "run8", "run9", "run10", "run11", "run12", "run13", "run14")
assign(df, df.tmp)
}
# Append the participant IDs and conditions to the front of each data frame
for(df in dfs) {
df.tmp <- get(df)
df.tmp <- cbind(ID, condition, df.tmp)
assign(df, df.tmp)
}
# Put the data frames in long form and append "_long" to the data frame name
for(df in dfs) {
df.tmp <- get(df)
df.tmp <- melt(data=df.tmp, idvars=ID, measure.vars=c("run1", "run2","run3", "run4", "run5", "run6", "run7", "run8", "run9", "run10", "run11", "run12", "run13", "run14"), variable.name = "time", value.name=df)
assign(paste(df, "_long", sep=""),df.tmp)
}
SSRT.df.raw <- cbind(SSRTdata_long, noResponseCount_long[,4], wrongGoCount_long[,4], pctInhibition_long[,4])
colnames(SSRT.df.raw) <- c("ID", "condition", "time", "SSRT", "numNoResponse", "numWrongGo", "pctInhibition")
# Replace NaNs with Na
SSRT.df.raw[ is.na(SSRT.df.raw) ] <- NA
View(SSRT.df.raw)
which(is.na(numNoResponse) | is.na(numWrongGo) | is.na(pctInhibition) && SSRT!="NA"))
which(is.na(numNoResponse) | is.na(numWrongGo) | is.na(pctInhibition) && SSRT!="NA")
SSRT.df.clean %>% which(is.na(numNoResponse) | is.na(numWrongGo) | is.na(pctInhibition) && SSRT!="NA")
SSRT.df.clean <- SSRT.df.raw
SSRT.df.clean %>% which(is.na(numNoResponse) | is.na(numWrongGo) | is.na(pctInhibition) && SSRT!="NA")
SSRT.df.clean %>% which(is.na(numNoResponse) | is.na(numWrongGo) | is.na(pctInhibition) & !is.na(SSRT))
SSRT.df.clean[is.na(numNoResponse) | is.na(numWrongGo) | is.na(pctInhibition) & !is.na(SSRT)]
SSRT.df.clean[is.na(SSRT.df.clean$numNoResponse) | is.na(SSRT.df.clean$numWrongGo) | is.na(SSRT.df.clean$pctInhibition) & !is.na(SSRT.df.clean$SSRT)]
SSRT.df.clean[is.na(SSRT.df.clean$numNoResponse) | is.na(SSRT.df.clean$numWrongGo) | is.na(SSRT.df.clean$pctInhibition) & !is.na(SSRT.df.clean$SSRT),]
SSRT.df.clean[is.na(SSRT.df.clean$numNoResponse) | is.na(SSRT.df.clean$numWrongGo) | is.na(SSRT.df.clean$pctInhibition) & !is.na(SSRT.df.clean$SSRT),]
SSRT.df.clean[is.na(SSRT)]
SSRT.df.clean[is.na(SSRT.df.clean$SSRT)]
SSRT.df.clean[is.na(SSRT.df.clean$SSRT),]
SSRT.df.raw[is.na(SSRT.df.clean$SSRT),]
SSRT.df.raw[is.na(SSRT.df.raw$SSRT),]
which(is.na(SSRT.df.raw$SSRT), arr.ind = TRUE)
which(is.na(SSRT.df.raw$SSRT) & is.na(SSRT.df.raw$numNoResponse), arr.ind = TRUE)
which(is.na(SSRT.df.raw$SSRT) & is.na(SSRT.df.raw$numNoResponse) & is.na(SSRT.df.raw$numWrongGo), arr.ind = TRUE)
which(is.na(SSRT.df.raw$SSRT) & is.na(SSRT.df.raw$numNoResponse) | is.na(SSRT.df.raw$numWrongGo), arr.ind = TRUE)
which(is.na(SSRT.df.raw$SSRT) | is.na(SSRT.df.raw$numNoResponse) | is.na(SSRT.df.raw$numWrongGo) | is.na(SSRT.df.raw$pctInhibition) & !is.na(SSRT.df.raw$SSRT), arr.ind = TRUE)
which(is.na(SSRT.df.raw$SSRT) | is.na(SSRT.df.raw$numNoResponse) | is.na(SSRT.df.raw$numWrongGo) | is.na(SSRT.df.raw$pctInhibition) && !is.na(SSRT.df.raw$SSRT), arr.ind = TRUE)
which(!is.na(SSRT.df.raw$SSRT) && is.na(SSRT.df.raw$SSRT) | is.na(SSRT.df.raw$numNoResponse) | is.na(SSRT.df.raw$numWrongGo) | is.na(SSRT.df.raw$pctInhibition), arr.ind = TRUE)
which(is.na(SSRT.df.raw$SSRT) || is.na(SSRT.df.raw$numNoResponse) || is.na(SSRT.df.raw$numWrongGo) || is.na(SSRT.df.raw$pctInhibition) & !is.na(SSRT.df.raw$SSRT), arr.ind = TRUE)
which(is.na(SSRT.df.raw$SSRT) || is.na(SSRT.df.raw$numNoResponse) || is.na(SSRT.df.raw$numWrongGo) || is.na(SSRT.df.raw$pctInhibition), arr.ind = TRUE)
which(is.na(SSRT.df.raw$SSRT) | is.na(SSRT.df.raw$numNoResponse) | is.na(SSRT.df.raw$numWrongGo) | is.na(SSRT.df.raw$pctInhibition), arr.ind = TRUE)
which(is.na(SSRT.df.raw$numNoResponse) || is.na(SSRT.df.raw$numWrongGo) || is.na(SSRT.df.raw$pctInhibition) & !is.na(SSRT.df.raw$SSRT), arr.ind = TRUE)
which(is.na(SSRT.df.raw$numNoResponse) || is.na(SSRT.df.raw$numWrongGo) || is.na(SSRT.df.raw$pctInhibition), arr.ind = TRUE)
which(is.na(SSRT.df.raw$numNoResponse) | is.na(SSRT.df.raw$numWrongGo) | is.na(SSRT.df.raw$pctInhibition) & !is.na(SSRT.df.raw$SSRT), arr.ind = TRUE)
which(is.na(SSRT.df.raw$numNoResponse) || is.na(SSRT.df.raw$numWrongGo))
> which(is.na(SSRT.df.raw$numNoResponse) | is.na(SSRT.df.raw$numWrongGo) | is.na(SSRT.df.raw$pctInhibition) && !is.na(SSRT.df.raw$SSRT), arr.ind = TRUE)
which(is.na(SSRT.df.raw$numNoResponse) | is.na(SSRT.df.raw$numWrongGo) | is.na(SSRT.df.raw$pctInhibition) && !is.na(SSRT.df.raw$SSRT), arr.ind = TRUE)
which(!is.na(SSRT.df.raw$SSRT))
which(!is.na(SSRT.df.raw$SSRT) & is.na(SSRT.df.raw$numNoResponse))
SSRT.df.raw[4,4] <- 2
SSRT.df.raw[4,4]
View(SSRT.df.raw)
which(!is.na(SSRT.df.raw$SSRT) & is.na(SSRT.df.raw$numNoResponse))
# Chunk 1: setup
rm(list=ls())
## Install and load required packages
list.of.packages <- c("dplyr", "reshape2", "ggplot2", "psych", "gridExtra", "knitr", "lme4")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(dplyr)
library(reshape2)
library(ggplot2)
library(psych)
library(gridExtra)
library(knitr)
library(lme4)
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/', echo=FALSE, warning=FALSE, message=FALSE)
# Chunk 2: Create the participant ID and condition variables
ID <- as.factor(c(1:144)) # Create the subject ID column
cond <- c(0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0) # Match the participant to their condition
condition <- factor(cond, labels=c("control", "train"))
# Chunk 3: Read in the data
## Import the SSRT results output from the extractAllSSTResults.m script
SSRTdata <- read.table(
"~/Desktop/REV/REV_SST/compiledResults/upToREV144/singleVarTxts/REV_SSRTint16.txt",
sep="\t", header=FALSE)
## No Response Counts
noResponseCount <- read.table(
"~/Desktop/REV/REV_SST/compiledResults/upToREV144/initialCheck/NRCount.txt",
sep="\t", header=FALSE)
## Wrong Go Counts
wrongGoCount <- read.table(
"~/Desktop/REV/REV_SST/compiledResults/upToREV144/initialCheck/wrongGoCount.txt",
sep="\t", header=FALSE)
## Percent inhibition
pctInhibition <- read.table(
"~/Desktop/REV/REV_SST/compiledResults/upToREV144/singleVarTxts/REV_PctInhib16.txt",
sep="\t", header=FALSE)
categories <- as.data.frame(read.table("~/Desktop/REV/REV_SST/info/participantCategories.txt"))
colnames(categories) <- c("ID", "completed.study", "num.categories", "food", "alcohol", "tobacco", "drugs")
categories <- categories[2:145, ]
# Chunk 4: Put all data frames in long form
# Make a vector containing all the dataframes
dfs <- c("noResponseCount", "wrongGoCount", "pctInhibition", "SSRTdata")
# Name the columns for each data frame by the run number
for(df in dfs) {
df.tmp <- get(df)
names(df.tmp) <- c("run1", "run2","run3", "run4", "run5", "run6", "run7", "run8", "run9", "run10", "run11", "run12", "run13", "run14")
assign(df, df.tmp)
}
# Append the participant IDs and conditions to the front of each data frame
for(df in dfs) {
df.tmp <- get(df)
df.tmp <- cbind(ID, condition, df.tmp)
assign(df, df.tmp)
}
# Put the data frames in long form and append "_long" to the data frame name
for(df in dfs) {
df.tmp <- get(df)
df.tmp <- melt(data=df.tmp, idvars=ID, measure.vars=c("run1", "run2","run3", "run4", "run5", "run6", "run7", "run8", "run9", "run10", "run11", "run12", "run13", "run14"), variable.name = "time", value.name=df)
assign(paste(df, "_long", sep=""),df.tmp)
}
# Chunk 5: Create a single data frame
SSRT.df.raw <- cbind(SSRTdata_long, noResponseCount_long[,4], wrongGoCount_long[,4], pctInhibition_long[,4])
colnames(SSRT.df.raw) <- c("ID", "condition", "time", "SSRT", "numNoResponse", "numWrongGo", "pctInhibition")
# Replace NaNs with Na
SSRT.df.raw[ is.na(SSRT.df.raw) ] <- NA
# Chunk 6: Remove problem runs
SSRT.df.clean <- SSRT.df.raw
########## MAKE SURE RIGHT GROUPS GETTING CRITERIA #############
## Replace non-responses with NA (Everyone, all time points)
SSRT.df.clean <- SSRT.df.clean %>% mutate(numNoResponse= replace(numNoResponse, which(numNoResponse>25 & time != "run1" & time != "run2" & time != "run13" & time != "run14" ), NA)) # Training
SSRT.df.clean <- SSRT.df.clean %>% mutate(numNoResponse= replace(numNoResponse, which(numNoResponse>50), NA)) # Scans
## And the SSRTs for the above
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(is.na(numNoResponse) & time != "run1" & time != "run2" & time != "run13" & time != "run14"), NA)) # Training
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(is.na(numNoResponse)), NA)) # Scans
## Replace wrong gos with NA (Everyone scans, only training group runs 3-12)
SSRT.df.clean <- SSRT.df.clean %>% mutate(numWrongGo= replace(numWrongGo, which(condition == "train" & numWrongGo>25 & time != "run1" & time != "run2" & time != "run13" & time != "run14"), NA)) # Training
SSRT.df.clean <- SSRT.df.clean %>% mutate(numWrongGo= replace(numWrongGo, which(numWrongGo>25 & time != "run3" & time != "run4" & time != "run5" & time != "run6" & time != "run7" & time != "run8" & time != "run9" & time != "run10" & time != "run11" & time != "run12"), NA)) # Scans
## And the SSRTs for the above
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(condition == "train" & is.na(numWrongGo) & time != "run1" & time != "run2" & time != "run13" & time != "run14" ), NA)) # Training
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(is.na(numWrongGo) & time != "run3" & time != "run4" & time != "run5" & time != "run6" & time != "run7" & time != "run8" & time != "run9" & time != "run10" & time != "run11" & time != "run12"), NA)) # Scans
## Replace SSRTs with NA (Everyone scans, only training group runs 3-12)
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(condition=="train" & SSRT>500 & time != "run1" & time != "run2" & time != "run13" & time != "run14"), NA)) # Training
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(SSRT>850 | SSRT <100 & time != "run3" & time != "run4" & time != "run5" & time != "run6" & time != "run7" & time != "run8" & time != "run9" & time != "run10" & time != "run11" & time != "run12"), NA)) # Scans
## Replace % inhibition with NA (Everyone scans, only training group runs 3-12)
SSRT.df.clean <- SSRT.df.clean %>% mutate(pctInhibition= replace(pctInhibition, which(pctInhibition<15 | pctInhibition>75 & condition=="train" & time != "run1" & time != "run2" & time != "run13" & time != "run14" ), NA)) # Training
SSRT.df.clean <- SSRT.df.clean %>% mutate(pctInhibition= replace(pctInhibition, which(pctInhibition<20 | pctInhibition>75 & time != "run3" & time != "run4" & time != "run5" & time != "run6" & time != "run7" & time != "run8" & time != "run9" & time != "run10" & time != "run11" & time != "run12"), NA)) # Scans
## And the SSRTs for the above
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(condition=="train" & is.na(pctInhibition) & time != "run1" & time != "run2" & time != "run13" & time != "run14" ), NA)) # Training
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(is.na(pctInhibition) & time != "run3" & time != "run4" & time != "run5" & time != "run6" & time != "run7" & time != "run8" & time != "run9" & time != "run10" & time != "run11" & time != "run12"), NA)) # Scans
help('identifier')
help(identifier)
apropos(identifier)
??(identifier)
??identifier
x <- rnorm(20)
x %>% mean()
library(dplyr)
x %>% mean()
x %>% sd
set.seed(100)
rnorm(n = 20, mean = 5, sd = 1) %>% mean()
?set.seed
rnorm(n = 20, mean = 5, sd = 1) %>% mean(trim = .5)
theta <- seq(0,1,.10)
theta
likelihood <- dbinom(6,10,theta)
likelihood
rounds <- seq(0,1,1)
rounds
rounds <- seq(0,10,1)
rounds
likelihood <- dbinom(rounds,10,theta)
likelihood
plot(theta,likelihood)
theta <- seq(0,1,.10)
likelihood <- dbinom(6,10,theta)
wins <- seq(0,10,1)
likelihood <- dbinom(wins,10,theta)
plot(theta,likelihood)
plot(theta,likelihood)
likelihood <- dbinom(6,10,theta)
for (i in wins){
print(dbinom(i,10,theta))
}
plot(theta,likelihood)
theta <- seq(0,1,.10)
likelihood <- dbinom(6,10,theta)
plot(theta,likelihood)
lr_60_50 <- dbinom(6,10,.6) / dbinom(6,10,.5# likelihood ratio
)
lr_60_50
library(shiny)
shinyUI(fluidPage(
titlePanel("Simple Interest Calculator"),
sidebarLayout(
sidebarPanel(
helpText("This app calculates simple interest
based on your inputs."),
br(),
numericInput("num_principal",
label = h6("Enter the principal amount (in $)"),
value = 1000),
br(),
sliderInput("slider_intrate",
label = h6("Choose the yearly interest rate (in %)"),
min = 0, max = 20, value = 5),
br(),
sliderInput("slider_num",
label = h6("Choose the number of time periods"),
min = 0, max = 50, value = 5),
selectInput("select_time",
label = h6(""),
choices = list("Years" = 1,
"Quarters" = 2,
"Months" =3),
selected = 1
),
br(),
br(),
actionButton("action_Calc", label = "Refresh & Calculate")
),
mainPanel(
tabsetPanel(
tabPanel("Output",
p(h5("Your entered values:")),
textOutput("text_principal"),
textOutput("text_intrate"),
textOutput("text_num"),
textOutput("text_time"),
br(),
p(h5("Calculated values:")),
textOutput("text_int"),
textOutput("text_amt")
),
tabPanel("Documentation",
p(h4("Simple Interest Calculator:")),
br(),
helpText("This application calculates simple interest
and total amount, i.e. principal plus interest."),
HTML("<u><b>Equation for calculation: </b></u>
<br> <br>
<b> A = P + I = P(1 + rt) ; R = r * 100 </b>
<br>
where: <br>
A = Total amount (Principal + Interest) <br>
P = Principal amount <br>
I = Interest amount <br>
r = Rate of interest per year, in decimal; r=R/100 <br>
t = Time period invested in years/quarters/months
")
)
)
)
)
))
setwd("/Users/kristadestasio/Dropbox/code/R/DevDataPdt/")
runApp(displayMode = 'showcase')
runApp()
runApp(displayMode = 'showcase')
?runApp
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp('~/Dropbox/GTFF')
? recode
? isolate
runApp('~/Dropbox/GTFF')
runApp('~/Dropbox/GTFF')
setwd("/Users/kristadestasio/Dropbox/GTFF/")
runApp('~/Dropbox/GTFF')
runApp()
runApp()
shiny::runApp(display.mode="showcase")
shiny::runApp()
